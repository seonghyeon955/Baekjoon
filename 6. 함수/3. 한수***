https://www.acmicpc.net/problem/1065
어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다. 등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다. 
N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력하는 프로그램을 작성하시오. 
입력) 첫째 줄에 1,000보다 작거나 같은 자연수 N이 주어진다.
출력) 첫째 줄에 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력한다.


+a)
등차수열(arithmetic sequence). 즉 연속하는 두 항의 차이가 모두 일정한 수열을 의미한다.
예로들면 [ 1, 1, 1, 1, 1 ] , [ 1, 2, 3, 4, 5 ] , [ 1, 3, 5, 7 ,9 ] 등이 있다.
등차수열을 일반 항으로 나타낸다면 아래와 같다.

an = a1 + (n-1) d
즉 두 항의 차이를 d 라고 할 때, n 번째 항은 초항과 (n-1) * d 의 합과 같다는 것이다.


우리가 풀 문제는 각 자리수가 등차수열을 이루고 있는지를 검사하는 문제다.
근데 잘 보면 1 ~ 1000 까지의 수 중 검사할 수는 100~1000 까지 밖에 없다.
생각해보자. 1 ~ 99 는 모두 등차 수열이다.
1 ~ 9 는 수가 하나 그 자체로 수열에 속한다.
10 ~ 99 또한 각 자리수의 차가 공차이고 그 수 자체로 수열을 이룬다.
예로들면 31 은 공차가 -2 인 수열이고, 38 은 공차가 5 인 수열이다.
그러면 우리가 알고리즘을 짤 때 생각해야 할 것은 100 보다 작은 수와 100 보다 큰 수의 케이스를 나누어 생각하면 되겠다.



답:

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main{
  public static void main(String[] args) throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    System.out.print(functiionA(Integer.parseInt(br.readLine()))); 
  }
  
  public static functionA(int num){ //함수시작
    int count=0;
    if(num <100){
      return num;
    }else{// num이 100보다 큰 경우
      cnt=99; // 1~99까지는 등차수열이므로 카운트는 이를 포함한 99부터 시작함.
      
      if(num == 1000){
        num=999; //1부터 1000안에서 수를 받는다고 했지만 1000은 실질적으로 등차수열이 아니므로 999로 예외를 만들어준다.
      }
      
      for(int i=100; i<= num ; i++){ //num이 100보다 큰 경우이므로 100에서부터 시작
        int hun = i/100; //백의자리 수
        int ten = (i/10) %10; //십의자리 수
        int one = i % 10; //일의자리 수
        
        if((hun-ten == ten-one)){
          cnt++;
        } //if end
      }// for end
    }//else end
   
   return cnt; //함수이므로 sysout 아니라 return
  }
}

