 Union-Find(합집합찾기)
 -대표적인 그래프 알고리즘
 -서로소 집합(Disjoint-Set)알고리즘이라고도 불림.(*서로소 집합 : 서로 같은 집합이 아닌것을 찾는 것)
 -구체적으로 여러 개의 노드가 존재할 때 두개의 노드를 선택해 현재 이 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘
 
 8개의 노드가 자유분방하게 존재할때, 각 노드는 자기 자신만을 집합의 원소로 가짐
 -> 자기자신이 부모가 됨
 
 1과 2가 연결될 경우, '연결성'을 표현해보자)
 
 노드번호 1   2   3   4   5   6   7   8  
 부모노드 1   1   3   4   5   6   7   8
 
 2번째 인덱스의 값에 1이 들어감으로써 '부모를 합칠땐 일반적으로 더 작은쪽으로 합친다.' = 합침(Union)
 
 1,2,3이 연결되었을 경우)
 
 노드번호 1   2   3   4   5   6   7   8  
 부모노드 1   1   2   4   5   6   7   8
 
 1,3이 연결되었는지 어떻게 파악할 수 있는가??
 -> 1과 3은 부모가 각각 1과 2로 다름 -> 부모노드만 보고선 한눈에 파악할 수 없음 -> 재귀함수 이용
 
 3의 부모를 찾기위해 3이 가리키고 있는 2를 찾음 -> 2의 부모는 1을 가리키고 있으므로 결과적으로 3의 부모가 1이 되는지 알 수 있음.
 결과적으로 합침 연산이 다 수행된 후의 표의 모습)
 
 노드번호 1   2   3   4   5   6   7   8  
 부모노드 1   1   1   4   5   6   7   8
 
 노드 1,2,3의 부모가 모두 1로 세 가지 노드는 모두 같은 그래프에 속함
 *Find알고리즘은 두 개의 노드의 부모노드를 확인, 현재 같은 집합에 속하는지를 확인하는 알고리즘.







코드)

public class Main {
    public static int[] parent = new int[1000001];
	
    public static int find(int x) {// 부모노드를 찾는 함수
        if(x == parent[x]) // x라는 값이 해당부모의 값과 같을경우 x값 반환
            return x;
        else 
            return parent[x] = find(parent[x]); //다를 경우 실질적인 부모를 찾기위해 재귀함수 실행(ex:3의 부모가 2인 경우 2가 가르키고 있는 1을 찾아옴)
	}
	
    public static void union(int x, int y) { //두 부모노드를 합치는 함수
        x = find(x);
        y = find(y);
        // 같은 부모를 가지고 있지 않을 때
        if(x != y) {
            // y가 x 보다 크다는 것을 가정한다면 아래와 같이 표현
            parent[y] = x;
            // 더 작은 값으로 넣어 줄 때 다음과 같이도 표현 가능(더 작은값 쪽으로 부모를 합침.)
            /* 
            if(x < y) parent[y] = x;
            else parent[x] = y;
            */
        }
    }
    
    //같은 부모 노드를 가지는지 확인(=같은 그래프에 속해있는지)
    public static boolean isSameParent(int x, int y) {
        x = find(x);
        y = find(y);
        if(x == y)
            return true;
        else
            return false;
    }
    
    public static void main(String[] args) {
        for(int i = 1; i <= 8; i++) {
            parent[i] = i;
        }
        union(1, 2); //1과 2연결
        union(2, 3); //2와 3
        System.out.println("1과 3은 연결되어 있나요? " + isSameParent(1,3));
    }	
}
