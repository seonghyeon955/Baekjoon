루트노드나 임의의 노드에서 시작하여 최대한 깊숙히 들어가 탐색 후 다시 원점으로 돌아가 다른 루트로 탐색하는 방식.(다음 노드로 넘어가기 전 해당 노드의 분기에 대해 완전 탐색을 하는 방식.)
일반적으로 재귀호출 사용하여 구현 / 단순한 스텍,인접행렬,인접 리스트를 이용하기도 함(스텍 사용시 오버플로우 유의할것)
자동 미로 생성 또는 미로 탐색에 사용됨
-미로 탐색 시 한 방향으로 갈 수 있을 때까지 계속 탐색. 막다른 곳 도달 시 표식을 남기고 가장 가까운 갈림길로 돌아와 다시 탐색 진행
-모든 노드를 방문하고자 하는 경우에 사용
-자기 자신을 호출하는 순환 알고리즘의 형태(재귀호출)
-노드 방문여부 검사는 필수! 안하면 무한루프에 빠짐

너비우선탐색 - 큐/ 깊이우선탐색-스텍 사용


1.시작노드를 스텍에 삽입
2. 스텍의 최상단 노드 확인
3. 최상단 노드에 방문하지 않은 인접노드가 있다면 그 노드를 스텍에 넣고 방문처리 함. 방문하지 않은 인접노드가 없으면 스텍에서 최상단 노드를 뺌.
4. 2번과 3번을 반복


인접행렬을 이용한 DFS구현

class DfsGraph{
  private int nV; //정점의 갯수
  private int[][] dfsGraph; //그래프
  private boolean[] visitArr; // 정점방문여부 확인 배열
  
  public DfsGraph(int nV){
    this.nV = nV;
    this.dfsGraph = new int[this.nV+1][this.nV+1];
    /*  그래프 초기화
        put(int x, int y)에서 입력되는 정점의 값은 0이상의 정수. 하지만 배열의 인덱스는 0부터 시작하므로 ArrayIndexOutOfBoundsException 방지를 위해
        정점을 담는 인접행렬의 행, 열의 size는 1을 더하여 초기화시켜준다. */
    this.visitArr = new boolean[this.nV+1];
    // 정점 방문 여부 확인 배열 초기화. 그래프와 마찬가지로 정점의 갯수에 +1을 하여 초기화를 한다.
   
  }
  
  public int[][] getGraph(){
    return this.dfsGraph;
  }
  public void put(int x, int y){ //그래프 추가(양방향)
    this.dfsGraph[x][y] = this.dfsGraph[y][x] = 1; //정점 x,y가 연결되어 있음을 의미
  }
  public void putSingle(int x, int y){ //그래프 추가(단방향)
    this.dfsGraph[x][y] =1;
  }
  
  

}
