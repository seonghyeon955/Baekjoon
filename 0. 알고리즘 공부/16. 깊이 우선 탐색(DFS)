루트노드나 임의의 노드에서 시작하여 최대한 깊숙히 들어가 탐색 후 다시 원점으로 돌아가 다른 루트로 탐색하는 방식.(다음 노드로 넘어가기 전 해당 노드의 분기에 대해 완전 탐색을 하는 방식.)
일반적으로 재귀호출 사용하여 구현 / 단순한 스텍,인접행렬,인접 리스트를 이용하기도 함(스텍 사용시 오버플로우 유의할것)
자동 미로 생성 또는 미로 탐색에 사용됨
-미로 탐색 시 한 방향으로 갈 수 있을 때까지 계속 탐색. 막다른 곳 도달 시 표식을 남기고 가장 가까운 갈림길로 돌아와 다시 탐색 진행
-모든 노드를 방문하고자 하는 경우에 사용
-자기 자신을 호출하는 순환 알고리즘의 형태(재귀호출)
-노드 방문여부 검사는 필수! 안하면 무한루프에 빠짐

너비우선탐색 - 큐/ 깊이우선탐색-스텍 사용


1. 시작노드를 스텍에 삽입
2. 스텍의 최상단 노드 확인
3. 최상단 노드에 방문하지 않은 인접노드가 있다면 그 노드를 스텍에 넣고 방문처리 함. 방문하지 않은 인접노드가 없으면 스텍에서 최상단 노드를 뺌.
4. 2번과 3번을 반복


인접행렬을 이용한 DFS구현
** ex) arr[1][2]=1 ---> 1번점과 2번점은 이어져있다. 그렇기 때문에 반대로 arr[2][1]=1 도 성립한다.

class DfsGraph{
  private int nV; //정점의 갯수
  private int[][] dfsGraph; //그래프
  private boolean[] visitArr; // 정점방문여부 확인 배열
  
  public DfsGraph(int nV){
    this.nV = nV;
    this.dfsGraph = new int[this.nV+1][this.nV+1];
    /*  그래프 초기화
        put(int x, int y)에서 입력되는 정점의 값은 0이상의 정수. 하지만 배열의 인덱스는 0부터 시작하므로 ArrayIndexOutOfBoundsException 방지를 위해
        정점을 담는 인접행렬의 행, 열의 size는 1을 더하여 초기화시켜준다. */
    this.visitArr = new boolean[this.nV+1];
    // 정점 방문 여부 확인 배열 초기화. 그래프와 마찬가지로 정점의 갯수에 +1을 하여 초기화를 한다.
   
  }
  
  public int[][] getGraph(){//그래프 리턴(사용)
    return this.dfsGraph;
  }
  
  public void put(int x, int y){ //그래프 추가(양방향)
    this.dfsGraph[x][y] = this.dfsGraph[y][x] = 1; //정점 x,y가 연결되어 있음을 의미
  }
  
  public void putSingle(int x, int y){ //그래프 추가(단방향)
    this.dfsGraph[x][y] =1;
  }
  
  public void printGraphToAdjArr(){//그래프 출력(인접행렬)
    for(int i=0; i<this.graph.length; i++){
      for(int j=0; j<this.dfsGraph[i].length; j++){
        System.out.println(" "+ this.dfsGraph[i][j]);
      }
      Syste.out.println();
    }
  }
  
  public void clearVisitArr(){ //정점 방문여부 확인 배열 초기화 ---> 나중에 방문한곳은 true로 채워나감
    for(int i=0; i<this.visitArr.length; i++){
      this.visitArr[i]=false;
    }
  }

public void dfs(int vIdx){ //그래프 탐색 - 재귀호출
  //dfs()에 들어온 vIdx는 방문한 것. 방문 배열의 해당 index값을 true로 바꿔주고 값을 출력.
  this.visitArr[vIdx] = true;
  System.out.print(vIdx + " ");
  
  for(int i=1; i<=this.nV; i++){ //정점의 갯수(nV)만큼 돌기
    //dfsGraph[][]의 해당 정점이 연결되어있ㅇ는 것으로 표시되어있으나 (연결은 1로 표시) 방문 배열에서 방문하지 않은 상태(false)인 경우 
    if(dfsgraph[vIdx][i] == 1 && visitArr[i] == false){
      dfs(i); //dfs() 재귀호출
    }
  }
}

}



public clss DFSAdjArr{
  public static void main(String[]args){ 
    // int v =0; 정점(수동입력에 사용되는 변수)
    // int e =0; 간선(수동입력에 사용되는 변수)
    
    int nV =0; //정점갯수
    int nE =0; //간선갯수
    
    Scanner scan = new Scanner(System.in);
    nV = sc.nextInt(); //정점
    nE = sc.nextInt(); //간선
    
    DfsGraph dfsGraph = new DfsGraph(nV);
    
    //그래프에 정점과 간선 입력, 입력받은 간선의 갯수만큼 반복 
    //ex) 정점 8, 간선 10
    
    dfsGraph.put(1, 2);
    dfsGraph.put(1, 3);
    dfsGraph.put(2, 4);
    dfsGraph.put(2, 5);
    dfsGraph.put(3, 6);
    dfsGraph.put(3, 7);
    dfsGraph.put(4, 8);
    dfsGraph.put(5, 8);
    dfsGraph.put(6, 8);
    dfsGraph.put(7, 8);
    
    /*정점과 간선 수동 입력
      for(int i=0; i<nE; i++){
        v = sc.nextInt();
        e = sc.nextInt();
        dfsGraph.put(v,e);
    */
        sc.close();
        
        dfsGraph.printGraphToAdjArr(); //입력한 정점과 간선으로 구성된 인접행렬 출력
        
        System.out.println();
        System.out.print("정점 1부터 탐색");
        dfsGrapg.dfs(1);
        
        System.out.println();
        System.out.print("정점 2부터 탐색");
        dfsGrapg.dfs(2);
        
        System.out.println();
        System.out.print("정점 3부터 탐색");
        dfsGrapg.dfs(3);
        
        System.out.println();
        System.out.print("정점 4부터 탐색");
        dfsGrapg.dfs(4);
        
        System.out.println();
        System.out.print("정점 5부터 탐색");
        dfsGrapg.dfs(5);
        
        System.out.println();
        System.out.print("정점 6부터 탐색");
        dfsGrapg.dfs(6);
        
        System.out.println();
        System.out.print("정점 7부터 탐색");
        dfsGrapg.dfs(7);
        
        System.out.println();
        System.out.print("정점 8부터 탐색");
        dfsGrapg.dfs(8);
  }

}
