- 하나의 큰 문제를 두개의 작은 문제로 분할한 뒤, 각자 계산하고 나중에 합치는 방법( "정확히 반을 나누고 나중에 정렬함")
- 대표적인 '분할정복' 방법을 택한 알고리즘.
- 퀵정렬과 같이 O(N * logN) 의 시간복잡도를 가짐
- 정확히 반씩 나눈다는 점에서 최악의 경우에도 O(N*logN)을 보장. (피버값에 따라 편향되게 분향되어 O(N^2)의 시간복잡도를 가질수 있는 퀵정렬과 대비)

Q) 다음의 숫자들을 오름차순으로 정렬하는 프로그램을 만드시오.
: 7 6 5 8 3 5 9 1 

시작 7, 6, 5, 8, 3, 5, 9, 1 
1. (6,7) (5,8) (3,5) (9,1)
2. (5,6,7,8) (1,3,5,9)
3. (1,3,5,5,6,7,8,9)

* 2의 배수씩 합치며, 합치는 순간 정렬한다. -> 2 ^ 3 = 8
* 괄호는 N번(위의 경우 8), 세로는 logN번(위의 경우 log2의 3-> 8이므로 세로는 3. 합치는 단계는 3단계로 끝남.)
--> N * logN = O(N * logN)을 보장함 (퀵정렬의 한계점 보안)
 
 i        j
(6, 7 ) ( 5, 8) 

k
_ _ _ _

부분집합은 이미 '정렬이 되어있는 상태로 가정', i와 j를 비교하여 더 작은 값을 K위치에 넣는다.
처리한 인덱스는 1씩 더해준다. (i,j,k 모두)

소스로 표현하기)

#include <stdio.h>

int number = 8; // 정렬할 데이터 갯수
int sorted[8]; //정렬된 결과 배열을 담을 공간. 정렬배열은 반드시 '전역변수'로 선언. 필요할때마다 생성하면 메모리의 낭비.!

void merge(int a[], int m, int middle, int n){
/*
  두개의 정렬된 부분배열을 이용하여 새롭게 정렬된 배열을 만들어내는 함수.
  int m : 시작점
  int middle: 중간점 
  int n: 끝점
  
*/

  int i= m; 
  int j = middle+1;
  int k= m; // 전역변수로 선언된 k는 i와 동일한 위치이다.
  
  //작은순서대로 배열에 삽입하기.
  while(i<= middle && j <= n){
    if(a[i] <= a[j]){ //i가 j보다 작을때
      sorted[k] = a[i];
      i++;
    }else{ //j가 i보다 작을때
      sorted[k] = a[j];
      j++;
    }
    k++; // i던 j던 k에 넣었으면 다음칸에도 값을 받기위해 k도 한칸씩 증가
  }//while end
  
  if(i > middle){//남은 데이터들 삽입 : i가 먼저 끝나버린 경우
      for(int t=j ; t<=n ; t++){
        sorted[k] =  a[t];//남은 j값 넣어주기
        k++;
      }
  }else{//남은 데이터들 삽입 : j가 먼저 끝나버린 경우
    for(int t=i; t<=middle; t++){
      sorted[k] = a[t];//남은 i값 넣어주기
      k++;
    }
  }//if end
  
  for(int t=m; t<=n; t++){ //정렬된 배열 삽입. 모든 배열을 방문하여 정렬된 배열의 값을 실제 배열의 값으로 이동
    a[t] = sorted[t];
  }//void merge end
  
  void mergeSort(int a[], int m, int n){
    if(m<n){//크기가 1보다 큰 경우
      int middle = (m + n)/2; // 정중앙
      mergeSort(a, m, middle); //중앙기점 왼쪽으로 병합정렬
      mergeSort(a, middle+1, n); //중앙기점 오른쪽으로 병합정렬
      merge(a, m, middle, n); //정렬된 2개의 배열 합침!!!!
    }
  }
  
  int main(void){
    int array[number] = {7,6,5,8,3,5,9,1};
    mergeSort(array, 0, number-1 ); //정렬
    for(int i=0; i<number; i++){ //정렬 완료 뒤 출력
      printf("%d", array[i]);
    }
  }
  
  
}




