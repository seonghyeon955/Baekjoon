-그래프의 대표적인 두 개의 탐색(너비 우선, 깊이우선 탐색)
-시간 복잡도 : O(V+E)
-탐색을 할때 '너비'를 우선으로 하여 탐색을 수행하는 탐색 알고리즘
-현 위치에 인접한 모든 위치의 노드를 방문 후 그 이웃 노드들의 또 다른 노드들을 방문하는 것을 다음에 진행
-최단 경로를 찾아준다는 점에서 최단 길이를 보장해야 할때 많이 이용
-큐(Queue) 이용하여 순환적 형태로 구현

1. 시작노드를 큐에 삽입 후 방문처리를 해줌
2. 큐에서 하나의 노드를 꺼냄
3. 해당 노드에 연결된 노드 중 방문하지 않은 노드를 방문후, 차례대로 큐에 삽입.
4. 2와 3 반복






문제 - 단지번호 붙이기(https://www.acmicpc.net/problem/2667)
<그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 
여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. 
<그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.
첫 번째 줄에는 지도의 크기 N(정사각형이므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고, 그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.

출력
첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.

예제 입력 1)
7
0110100
0110101
1110101
0000111
0100000
0111110
0111000

예제 출력 1) 
3
7
8
9

풀이)

* 플러드필 알고리즘 : 어떤 배열을 채우는 알고리즘이며, 어떤 위치와 연결된 모든 위치를 찾음. dx,dy가 이용됨.
* check[i][j] = "(i,j)를 방문하지않았다면 0, 했다면 단지번호"
* 인접행렬/인접리스트 필요없음 - 간선으로 연결된 정점은 좌,위,우,아래 중 한칸이기 때문에 모든 칸마다 4칸을 점검하면 되기 때문.

0,0   0,1   0,2   0,3
1,0   1,1   1,2   1,3
2,0   2,1   2,2   2,4

일때 1,1을 기준으로 

           -1, 0
             ^
             |
0, -1 <---- 현위치 ----> 0, +1
             |
             v
           +1, 0
           
           
왼쪽부터 시계방향순으로 
int dx[4] = {0,-1,0,1}
int dy[4] = {-1,0,1,0}

* 모든 땅에 번호를 매기는걸 완료한 후 그 번호들을 각각 카운팅 해준다
* 이는 ans[땅에 매겨진 번호] += 1을 함으로써 얻을 수 있다.

-dx,dy는 동시에 같은 인덱스만 뽑아서 써야한다
-ans배열에서 맨 앞의 0은 사용하지 않았으므로 sort(ans+1, ans+cnt+1)처럼 +1을 해줘야 한다.
-check배열을 이용해 중복방문은 하지 않으며, 간선이 있으면 가는거고 아니면 안가는것.

풀이)

import java.util.*;

public class Main{
  static int map[][];
  static int visit[][];
  static int dx[] = {0,0,-1,1};//상하좌우
  static int dy[] = {-1,1,0,0};
  static int N;
  
  public static void main(String[]args){
    Scanner sc = new Scanner(System.in);
    N = sc.nextInt();
    
    map = new int[N+1][N+1];
    visit = new int[N+1][N+1];
    
    for(int i=0; i<N; i++){//map배열의 행,열을 Scanner을 통해 받은 값으로 채운다.
      String input = sc.next();
      for(int j=0; j<input.length(); j++){//열
        map[i][j] = input.charAt(j)-48;
      }
    }
  bfs();
  }
  
}
 public static void bfs(){
  Queue<Integer> qx = new LinkedList<Integer>();
  Queue<Integer> qy = new LinkedList<Integer>();
  ArrayList<Integer> arr = new ArrayList<Integer>();
  
  for(int ti=0; ti<Nl ti++){
    int x, y;// 현재위치
    int tx,ty; // 상,하,좌,우
    int hCnt; //단지내 집의 갯수
    
    for(int tj=0; tj<N; tj++){
      hCnt=1;
      if(map[ti][tj] == 1){
        x =ti;
        y =tj;
        qx.add(x);
        qx.add(y);
        visit[x][y] = 1; //방문 표시
        
        while( !qx.isEmpty() && !qy.isEmpty() ){
          x = qx.poll();
          y = qy.poll();
          for(int i=0; i<=3; i++){
            tx = x+dx[i];
            ty = y+dy[i];//현재위치 기준 상하좌우의 위치가 집이 맞는지 체크
            if(tx>=0 && ty>=0 && tx< N && ty <N){
              if(map[tx][ty] == 1 && visit[tx][ty] == 0){
                hCnt++;
                map[tx][ty] = 0;
                qx.add(tx);
                qy.add(ty);
              }
              visit[tx][ty] = 1;
            }
            
          }//for end
       }//while end
       arr.add(hCnt);
    }//if end
   }
  }
 }
  Collections.sort(arr); //오름차순 정렬
 }          
 Iterator<Integer> itr = arr.iterator();
 System.out.println(arr.size());//단지 수
 while(itr.hasNext()){
  System.out.println(itr.next());//단지 내 집의 수
 }        
 }      
 }  
 












문제 - 미로탐색(https://www.acmicpc.net/problem/2178)
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1

미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 
이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 
*한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.
위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. *칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.
*1은 이동할 수 있는 칸/0은 이동할 수 없는 칸


입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. *각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

예제 입력 1) 
4 6
101111
101010
101011
111011

예제 출력 1)
15
-----------------------------------------------------------------


풀이)
1. 다음 방문할 점을 큐에 넣는다.
2. 큐에서 빼온다음 다음 갈곳이 조건에 벗어나지 않는 경우 큐에 넣는다
3. 큐가 빌때까지 반복한다


import java.util.*;
import java.io.*;


public class main{
  staic int[][] arr;
  staic int[][] maze; //미로
  static boolean[][] visited;//방문여부
  static int[] dx = {-0,1,0,-1}; //상우하좌
  static int[] dy = {1,0,-1,0};
  static int n,m; //행, 열
  
  public staic void bfs(){
    Queue<Integer> queue_x = new LinkedList<Integer>(); //x값에 대한 Queue
    Queue<Integer> queue_y= new LinkedList<Integer>(); //y값에 대한 Queue
    
    queue_x.offer(0);
    queue_y.offer(0); //0으로 초기화
    
    checked[0][0] = true;
    
    while(!queue_x.isEmpty()){
      int x = queue_x.poll();
      int y = queue_y.poll();
      
      for(int k=0; k<4; k++){
        //상하좌우 확인
        int temp_x = x+dx[k];
        int temp_y = y+dy[k];
        
        if(temp_x >=0 && temp_y>= 0 && temp_x <n && temp_y <m )/{ /유효범위인지 확인
          if(maze[temp_x][temp_y] == 1 && checked[temp_x][temp_y] == false){
            queue_x.offer(temp_x);
            queue_y.offer(temp_y);
            
            checked[temp_x][temp_y] = true;
            
            maze[temp_x][temp_y] = maze[x][y] +1;//이동횟수 
          }
        }
        
      }
    }
  }

  public staic void main(String[]args)throws IOException{
    Scanner sc = new Scanner(System.in);
    n = sc.nextInt();//줄(행)
    m = sc.nextInt();//열
    maze= new int[n][m];
    checked = new boolean[n][m];
    
    for(int i=0; i<n; i++){
      String temp = sc.next(); // 붙어서 입력되기 때문에 다음 공백까지 받아오는 .next()를 사용
      for(int j=0; j<m j++){
        maze[i][j] = (int)temp.charAt(j) -48; //아스키코드값 반환
      }
    }
    bfs();
    System.out.print(maze[n-1][m-1]); // (n,m)출력, 좌표값이기 때문에 각각 -1을 해줌.
  }

}

   
