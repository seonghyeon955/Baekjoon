삽입 정렬 -  각 숫자를 '필요할 때만' 적절한 위치에 삽입하는 방법 으로 문제를 해결. (!= 타 정렬방식 : '무조건' 위치변경)
기본적으로 '정렬이 되어있다고 가정'하는 점에서 빠른속도를 낸다

** 시간 복잡도는 선택/버블/삽입 정렬 모두 O(N*N)으로 동일하지만(동작하는 for문이 중첩하기 때문 )
   실제로는 삽입정렬이 연산수가 가장 적게 일어나는 가장 뛰어난 알고리즘임.
   특히, 다음과 같이 거의 정렬된 데이터 상태일때
       ( 2 3 4 5 6 7 8 9 10 1 )
       2~ 10 까지는 옆자리와 크기 비교만 거치고 마지막 1일때 연산을 시작하므로 제일 효율적이다.



q. 다음의 숫자들을 오름차순으로 정렬하는 프로그램을 작성하시오
  1,10,5,8,7,6,4,3,2,9
  
해결)

#include <stdio.h>

int main(void){
  int i, j, temp;
  int[10] arr = {1,10,5,8,7,6,4,3,2,9};
  for(int i=0; i<arr.length; i++){
    j=i; //현재 정렬할 원소를 선택, 적절한 위치에 삽입할 수 있게 함
    while(j>=0 && arr[j]>arr[j+1]){ //특정원소를 선택한 뒤 옆의 수와 비교, 값이 더 클 경우 위치 변경 
      temp= arr[j];
      arr[j] = arr[j+1];
      arr[j+1] = temp;
      j--; //j가 줄어들되 0보단 같거나 커야함.
    }
  }
  for(int i=0; i<arr.length; i++){
    printf("%d", arr[i]);
  }
}
}
